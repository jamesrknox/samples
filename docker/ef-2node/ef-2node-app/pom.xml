<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- vim: set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab : -->

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tibco.ep.samples.docker</groupId>
    <artifactId>ef-2node_app</artifactId>
    <packaging>ep-application</packaging>
    <version>1.0.0</version>
    <name>Docker : 2-node EventFlow - Application</name>
    <description>How to deploy a 2-node EventFlow application in Docker - Application</description>

    <url>https://github.com/plord12/samples</url>

    <inceptionYear>2018</inceptionYear>

    <organization>
        <name>TIBCO Software Inc.</name>
        <url>http://www.tibco.com</url>
    </organization>

    <licenses>
        <license>
            <name>BSD 3-Clause License</name>
            <url>https://raw.githubusercontent.com/plord12/samples/master/docs/LICENSE</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <!-- common definitions for this version of StreamBase -->
    <parent>
        <groupId>com.tibco.ep.sb.parent</groupId>
        <artifactId>ep-application-docker</artifactId>
        <version>10.4.0-SNAPSHOT</version>
        <relativePath/>
    </parent>

    <properties>
        <dockerDomain>example.com</dockerDomain>
        <skipApplicationDocker>true</skipApplicationDocker>
        <skipStreamBaseDockerBase>true</skipStreamBaseDockerBase>
        <skipDockerTests>true</skipDockerTests>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>com.tibco.ep.samples.docker</groupId>
            <artifactId>ef-2node_ef</artifactId>
            <version>1.0.0</version>
            <type>ep-eventflow-fragment</type>
        </dependency>
    </dependencies>

    <profiles>
        <!-- use mvn -P uml install to re-generate svg from source ( then commit ) -->
        <profile>
            <id>uml</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.kryshchuk.maven.plugins</groupId>
                        <artifactId>umlet-maven-plugin</artifactId>
                        <version>1.2</version>
                        <executions>
                            <execution>
                                <id>create svg</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>convert</goal>
                                </goals>
                                <configuration>
                                    <format>svg</format>
                                    <outputDirectory>src/site/markdown/images</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- if docker is available, build docker projects -->
        <profile>
            <id>Docker in local</id>
            <activation>
                <file>
                    <exists>/usr/local/bin/docker</exists>
                </file>
            </activation>
            <properties>
                <skipApplicationDocker>false</skipApplicationDocker>
                <skipStreamBaseDockerBase>false</skipStreamBaseDockerBase>
                <skipDockerTests>${skipTests}</skipDockerTests>
            </properties>
        </profile>
        <profile>
            <id>Docker in bin</id>
            <activation>
                <file>
                    <exists>/usr/bin/docker</exists>
                </file>
            </activation>
            <properties>
                <skipApplicationDocker>false</skipApplicationDocker>
                <skipStreamBaseDockerBase>false</skipStreamBaseDockerBase>
                <skipDockerTests>${skipTests}</skipDockerTests>
            </properties>
        </profile>
        <profile>
            <id>Docker in C:</id>
            <activation>
                <file>
                    <exists>C:\Program Files\Docker\Docker\resources\bin\docker.exe</exists>
                </file>
            </activation>
            <properties>
                <skipApplicationDocker>false</skipApplicationDocker>
                <skipStreamBaseDockerBase>false</skipStreamBaseDockerBase>
                <skipDockerTests>${skipTests}</skipDockerTests>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>

            <!--  deploy site documentation to github pages -->
            <!--  in CI use mvn site com.github.github:site-maven-plugin:site -->
            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <version>0.12</version>
                <configuration>
                    <server>github</server>
                    <message>Updated site documentation from jenkins</message>
                    <path>${project.parent.version}/docker/ef-2node/${project.artifactId}</path>
                    <merge>true</merge>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.tibco.ep</groupId>
                <artifactId>ep-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <skipTests>${skipLocalTests}</skipTests>
                    <nodes>
                        <node>A</node>
                        <node>B</node>
                     </nodes>
                 </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <executions>
                <execution>
                    <id>start nodes</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <startParallel>true</startParallel>
                            <skip>${skipDockerTests}</skip>
                            <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                            <images>
                                <image>
                                    <name>%g/%a:%l</name>
                                    <alias>A.${project.artifactId}</alias>
                                    <run>
                                        <network>
                                            <name>${dockerDomain}</name>
                                            <alias>A.${dockerDomain}</alias>
                                        </network>
                                        <hostname>A.${dockerDomain}</hostname>
                                        <env>
                                            <NODENAME>A.${project.artifactId}</NODENAME>
                                        </env>
                                        <log>
                                            <enabled>true</enabled>
                                        </log>
                                        <wait>
                                            <log>COMMAND FINISHED</log>
                                            <time>100000</time>
                                            <exec>
                                                <postStart>epadmin servicename=A.${project.artifactId} display cluster</postStart>
                                            </exec>
                                        </wait>
                                        <namingStrategy>alias</namingStrategy>
                                    </run>
                                </image>
                                <image>
                                    <name>%g/%a:%l</name>
                                    <alias>B.${project.artifactId}</alias>
                                    <run>
                                        <network>
                                            <name>${dockerDomain}</name>
                                            <alias>B.${dockerDomain}</alias>
                                        </network>
                                        <hostname>B.${dockerDomain}</hostname>
                                        <env>
                                            <NODENAME>B.${project.artifactId}</NODENAME>
                                        </env>
                                        <log>
                                            <enabled>true</enabled>
                                        </log>
                                        <wait>
                                            <log>COMMAND FINISHED</log>
                                            <time>100000</time>
                                            <exec>
                                                <postStart>epadmin servicename=B.${project.artifactId} display cluster</postStart>
                                            </exec>
                                        </wait>
                                        <namingStrategy>alias</namingStrategy>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop nodes</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <skip>${skipDockerTests}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
