<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- vim: set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab : -->

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tibco.ep.samples.highavailability</groupId>
    <artifactId>pd-2node-app</artifactId>
    <packaging>ep-application</packaging>
    <version>1.0.0</version>
    <name>HA : proxy discovery - Application</name>
    <description>How to build a 2-node active active deployment + proxy discovery. - Application</description>

    <url>https://github.com/plord12/samples</url>

    <inceptionYear>2018</inceptionYear>

    <organization>
        <name>TIBCO Software Inc.</name>
        <url>http://www.tibco.com</url>
    </organization>

    <licenses>
        <license>
            <name>BSD 3-Clause License</name>
            <url>https://raw.githubusercontent.com/plord12/samples/10.4.0/docs/LICENSE</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <!-- common definitions for this version of StreamBase -->
    <parent>
        <groupId>com.tibco.ep.sb.parent</groupId>
        <artifactId>ep-application</artifactId>
        <version>10.4.0-SNAPSHOT</version>
        <relativePath/>
    </parent>

    <properties>
        <dockerDomain>example.com</dockerDomain>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.tibco.ep.samples.highavailability</groupId>
            <artifactId>pd-2node-ef</artifactId>
            <version>1.0.0</version>
            <type>ep-eventflow-fragment</type>
        </dependency>
    </dependencies>

    <!-- use mvn -P uml install to re-generate svg from source ( then commit ) -->
    <profiles>
        <profile>
            <id>uml</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.kryshchuk.maven.plugins</groupId>
                        <artifactId>umlet-maven-plugin</artifactId>
                        <version>1.2</version>
                        <executions>
                            <execution>
                                <id>create svg</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>convert</goal>
                                </goals>
                                <configuration>
                                    <format>svg</format>
                                    <outputDirectory>src/site/markdown/images</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <plugins>

            <!-- find local hostname -->
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <scripts>
                                <script>
                                    project.properties["hostname"] = InetAddress.getLocalHost().getHostName()
                                </script>
                            </scripts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- allocate unused and random ports for static discovery -->

            <!-- NOTE: the DTP_RES entries exist to allow distribution to
                 use a range of ports (numberSearchPorts=5). This assumes
                 that reserve-network-port sequentially allocates ports,
                 which is does by default.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>reserve-network-port</id>
                        <goals>
                            <goal>reserve-network-port</goal>
                        </goals>
                        <phase>process-test-resources</phase>
                        <configuration>
                            <randomPort>false</randomPort>
                            <portNames>
                                <portName>A_DATATRANSPORTPORT</portName>
                                <portName>A_DTP_RES1</portName>
                                <portName>A_DTP_RES2</portName>
                                <portName>A_DTP_RES3</portName>
                                <portName>A_DTP_RES4</portName>
                                <portName>A_DTP_RES5</portName>
                                <portName>A_ADMINPORT</portName>
                                <portName>B_DATATRANSPORTPORT</portName>
                                <portName>B_DTP_RES1</portName>
                                <portName>B_DTP_RES2</portName>
                                <portName>B_DTP_RES3</portName>
                                <portName>B_DTP_RES4</portName>
                                <portName>B_DTP_RES5</portName>
                                <portName>B_ADMINPORT</portName>
                            </portNames>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!--  deploy site documentation to github pages -->
            <!--  in CI use mvn site com.github.github:site-maven-plugin:site -->
            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <version>0.12</version>
                <configuration>
                    <server>github</server>
                    <message>Updated site documentation from jenkins</message>
                    <path>${project.parent.version}/highavailability/pd-2node/${project.artifactId}</path>
                    <merge>true</merge>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.tibco.ep</groupId>
                <artifactId>ep-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <skipTests>${skipLocalTests}</skipTests>
                    <nodes>
                        <node>A</node>
                        <node>B</node>
                    </nodes>
                    <installArguments>
                        <substitutions>A_DATATRANSPORTPORT=${A_DATATRANSPORTPORT},B_DATATRANSPORTPORT=${B_DATATRANSPORTPORT},A_ADMINPORT=${A_ADMINPORT},B_ADMINPORT=${B_ADMINPORT},A_HOSTNAME=${hostname},B_HOSTNAME=${hostname}</substitutions>
                    </installArguments>
                </configuration>

                <executions>

                    <execution>
                        <id>start nodes</id>
                        <phase>pre-integration-test</phase>
                        <goals><goal>start-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                        </configuration>
                    </execution>

                    <execution>
                        <id>Display partition</id>
                        <phase>integration-test</phase>
                        <goals><goal>administer-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <command>display</command>
                            <target>partition</target>
                        </configuration>
                    </execution>

                    <execution>
                        <id>Run playback to A</id>
                        <phase>integration-test</phase>
                        <goals><goal>administer-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <command>start</command>
                            <target>playback</target>
                            <serviceName>A.${project.artifactId}</serviceName>
                            <arguments>
                                <engine>pd-2node-ef</engine>
                                <simulationfile>${project.basedir}/src/test/configurations/test.sbfs</simulationfile>
                            </arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>Wait for playback to complete</id>
                        <phase>integration-test</phase>
                        <goals><goal>administer-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <command>wait</command>
                            <target>playback</target>
                            <serviceName>A.${project.artifactId}</serviceName>

                        </configuration>
                    </execution>

                    <execution>
                        <id>Display objects on node A</id>
                        <phase>integration-test</phase>
                        <goals><goal>administer-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <command>read</command>
                            <target>querytable</target>
                            <serviceName>A.${project.artifactId}</serviceName>
                        </configuration>
                    </execution>

                    <execution>
                        <id>stop node A</id>
                        <phase>integration-test</phase>
                        <goals><goal>stop-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <nodes>
                                <node>A</node>
                            </nodes>
                        </configuration>
                    </execution>

                    <execution>
                        <id>Display objects on node B</id>
                        <phase>integration-test</phase>
                        <goals><goal>administer-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <command>read</command>
                            <target>querytable</target>
                            <serviceName>B.${project.artifactId}</serviceName>
                        </configuration>
                    </execution>

                    <execution>
                        <id>stop node B</id>
                        <phase>integration-test</phase>
                        <goals><goal>stop-nodes</goal></goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <nodes>
                                <node>B</node>
                            </nodes>
                        </configuration>
                    </execution>                    

                </executions>
            </plugin>

            <!-- wait for application to finish starting -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>wait for applications to start</id>
                        <phase>pre-integration-test</phase>
                        <goals><goal>run</goal></goals>
                        <configuration>
                            <target>
                                <!-- wait for max 10 minutes checking every 500ms -->
                                <waitfor maxwait="10" maxwaitunit="minute" checkevery="500"  timeoutproperty="atimeout">
                                    <resourcecontains resource="${project.build.directory}/test-nodes/A.${project.artifactId}/logs/pd-2node-ef.log" substring=" sbd at "/>
                                </waitfor>
                                <waitfor maxwait="10" maxwaitunit="minute" checkevery="500"  timeoutproperty="btimeout">
                                    <resourcecontains resource="${project.build.directory}/test-nodes/B.${project.artifactId}/logs/pd-2node-ef.log" substring=" sbd at "/>
                                </waitfor>
                                <fail message="Application on node A failed to startup in time">
                                    <condition>
                                        <isset property="atimeout"/>
                                    </condition>
                                </fail>
                                <fail message="Application on node B failed to startup in time">
                                    <condition>
                                        <isset property="btimeout"/>
                                    </condition>
                                </fail>
                            </target>
                            <skip>${skipTests}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
